use codigito;
LOCK TABLES `credentials` WRITE;
INSERT INTO `credentials` VALUES ('fc4458c0-7ffd-40c1-b391-fcb62b6c25cd','admin@admin.com','$2y$13$A9f72p5zksO7UyX3q0vAx.3OhkeF/ZCylJIpTN0gskQ916Ted3QKq','[\"ROLE_ADMIN\"]','2023-02-01 17:33:36','2023-02-01 17:33:36');
UNLOCK TABLES;

LOCK TABLES `fortunes` WRITE;
/*!40000 ALTER TABLE `fortunes` DISABLE KEYS */;
INSERT INTO `fortunes` VALUES ('73789579-da6c-4b31-8d5c-6fe87feafed8','Si el camino es bello, no preguntemos a dónde va','2023-03-14 08:49:37'),('86d83e1c-a03c-4c38-a237-5fc2ebb812ba','La felicidad es una dirección, no un lugar','2023-03-14 08:49:32'),('bd1e3828-192b-43db-80b3-dae50102bf7a','Cometer errores en la vida no solo es honorable, es más útil que no hacer nada','2023-03-14 08:49:43');
/*!40000 ALTER TABLE `fortunes` ENABLE KEYS */;
UNLOCK TABLES;

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES ('6da3c593-0e7f-42ce-be1e-fe4615746cfb','libros','4453b1d3-a102-4fdb-a5f9-ec33237973cb.jpg','2023-03-14 18:15:30'),('932b669b-fefa-4fd5-afa3-ff2bace20ce1','arquitectura','35f783b6-9610-4ede-b0fb-0b0e081f08c2.jpg','2023-03-14 18:15:23');
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `blogcontents`
--

LOCK TABLES `blogcontents` WRITE;
/*!40000 ALTER TABLE `blogcontents` DISABLE KEYS */;
INSERT INTO `blogcontents` VALUES
('0271fed7-9690-4a63-be86-35c444882a6d','517d4167-56d8-4b6c-91e6-a1f7c48fb777',1,NULL,NULL,'https://www.youtube.com/embed/Qixpb36z9rA','2023-07-25 08:08:28'),
('049bad49-b72d-459e-8929-671a45ab0ce0','26915999-32f3-44bb-91a5-37f1a196428c',1,NULL,NULL,'https://www.youtube.com/embed/k8HarXw7Gac','2023-07-25 08:06:29'),
('06c08a66-2ad4-4014-a672-2722c0fa6bd6','f34bce35-2ed9-44c3-9e1c-a0b23344c102',2,'Una excepción de dominio, también conocida como \"DomainException\" en inglés, es una categoría de excepción que se produce cuando se viola una restricción específica del dominio o ámbito de una aplicación o sistema.\r\n\r\n\r\nEn términos generales, una excepción es un evento inesperado o no deseado que ocurre durante la ejecución de un programa y puede interrumpir su flujo normal. Las excepciones de dominio están diseñadas para capturar y manejar errores o situaciones inusuales que están relacionados directamente con el dominio de la aplicación.\r\n\r\n\r\nCuando una aplicación establece ciertas reglas o restricciones en su lógica de negocio, las excepciones de dominio se utilizan para informar sobre situaciones en las que estas reglas son violadas. Por ejemplo, si se espera que un valor numérico sea mayor que cero y se intenta asignar un valor negativo, se podría lanzar una excepción de dominio para indicar que se ha producido un error en los datos.\r\n\r\n\r\nLas excepciones de dominio ayudan a mantener la integridad y coherencia de los datos dentro del contexto de una aplicación. Proporcionan una forma estructurada de manejar errores específicos relacionados con el dominio, permitiendo que el flujo del programa sea controlado y se tomen las medidas adecuadas para corregir o informar sobre la situación de error.\r\n\r\n\r\nEn resumen, las excepciones de dominio son un mecanismo utilizado en programación para manejar errores o situaciones anómalas que violan las reglas o restricciones específicas del dominio de una aplicación. Ayudan a mejorar la robustez y fiabilidad del software, permitiendo una gestión adecuada de los errores en el ámbito en el que se producen.\r\n\r\n\r\n\r\n\r\n{.\".}--------------------------\r\n⭐ Do you like my songs? You can become a member and support me to create more content.\r\nJoin here: https://www.youtube.com/channel/UCyD5...\r\n⭐ Follow my Spotify Lo-Fi Playlist: https://spoti.fi/3c3MEiV\r\nmusic by @lofigeek\r\nhttps://www.instagram.com/lofigeek\r\nartwork by @shanevmm\r\nhttps://www.instagram.com/shanevmm\r\n{.\".}--------------------------',NULL,NULL,'2023-07-25 08:09:34'),
('1a673aa0-8298-4a03-b959-200425dea74b','93d52a3a-bffe-41a6-a52d-455336219ba0',1,NULL,NULL,'https://www.youtube.com/embed/uQ7_fNpn9uM','2023-07-25 08:04:34'),
('1d9f2109-4e09-4b83-85b5-2d19c5ef58c3','f34bce35-2ed9-44c3-9e1c-a0b23344c102',1,NULL,NULL,'https://www.youtube.com/embed/e68kclSGmhw','2023-07-25 08:09:28'),
('45311fa3-72f8-4650-a8c5-65ead09e6b39','a904c0ba-7211-42f7-922a-560c846350cb',2,'La semántica juega un papel fundamental en el desarrollo de software, ya que se refiere al significado y la interpretación de las construcciones y expresiones utilizadas en el código. La correcta comprensión y aplicación de la semántica es esencial para desarrollar software de calidad y garantizar su correcto funcionamiento.\r\n\r\nAquí hay algunas razones que destacan la importancia de la semántica en el desarrollo de software:\r\n\r\nComprensión del código: La semántica ayuda a los desarrolladores a comprender el significado y la intención detrás del código. Al entender cómo se supone que funciona una construcción o expresión en particular, los desarrolladores pueden escribir un código más claro y legible, lo que facilita el mantenimiento y la colaboración en el desarrollo de software.\r\n\r\nEvita errores y comportamientos inesperados: Una mala interpretación de la semántica puede llevar a errores en el código. Los errores semánticos pueden ser difíciles de detectar y depurar, ya que no siempre generan mensajes de error claros. Además, pueden conducir a comportamientos inesperados durante la ejecución del programa. Al comprender correctamente la semántica, los desarrolladores pueden evitar estos errores y asegurar un comportamiento coherente y predecible del software.\r\n\r\nInteroperabilidad: La semántica también es importante para garantizar la interoperabilidad entre diferentes componentes de software. Cuando se utilizan estándares y especificaciones bien definidos con una semántica clara, es más fácil para diferentes sistemas y aplicaciones comunicarse entre sí. Esto es especialmente relevante en entornos distribuidos y en el desarrollo de interfaces de programación de aplicaciones (API).\r\n\r\nOptimización y rendimiento: El conocimiento de la semántica puede ayudar a los desarrolladores a optimizar el rendimiento del software. Al comprender cómo se comportan ciertas construcciones o expresiones en el nivel de ejecución, los desarrolladores pueden aplicar técnicas de optimización específicas para mejorar la eficiencia y la velocidad del software.\r\n\r\nMantenimiento y evolución del software: A medida que el software evoluciona y se actualiza, comprender la semántica es fundamental para garantizar que los cambios realizados no afecten negativamente la funcionalidad existente. Al comprender la semántica del código base, los desarrolladores pueden introducir cambios de manera segura y minimizar el riesgo de introducir errores o comportamientos no deseados.\r\n\r\nEn resumen, la semántica desempeña un papel crucial en el desarrollo de software al ayudar a los desarrolladores a comprender y expresar el significado y la intención del código. Esto conduce a un código más claro, menos propenso a errores, más eficiente y más fácil de mantener. La comprensión adecuada de la semántica es esencial para lograr un desarrollo de software exitoso.',NULL,NULL,'2023-07-25 08:07:41'),
('4a08aa5a-be4f-4ffe-ac06-34a2c385fa65','517d4167-56d8-4b6c-91e6-a1f7c48fb777',2,'Los tests en programación, también conocidos como pruebas o testing, son una parte fundamental del desarrollo de software. A continuación, te proporciono un breve resumen de las ventajas de los tests en programación:\r\n\r\nDetección de errores: Los tests permiten identificar errores y defectos en el código antes de que el software sea lanzado. Al ejecutar los tests, se pueden encontrar y corregir problemas antes de que afecten a los usuarios finales, lo que ayuda a garantizar la calidad del software.\r\n\r\nMantenimiento del código: Los tests facilitan el mantenimiento del código a lo largo del tiempo. Al tener una suite de pruebas bien desarrollada, se puede realizar cambios en el código con confianza, sabiendo que los tests verificarán que las funcionalidades existentes sigan funcionando correctamente. Esto reduce el riesgo de introducir nuevos errores al realizar modificaciones en el software.\r\n\r\nDocumentación del comportamiento esperado: Los tests sirven como una forma de documentación viva del comportamiento esperado del software. Al leer los tests, los desarrolladores y otros miembros del equipo pueden comprender rápidamente cómo se supone que deben funcionar las diferentes partes del programa. Esto facilita la colaboración y la comprensión del código en un proyecto, especialmente cuando varias personas trabajan en él.\r\n\r\nMejora de la eficiencia: Aunque los tests requieren tiempo y esfuerzo adicionales durante el desarrollo, a largo plazo pueden mejorar la eficiencia del proceso. Al realizar pruebas automáticas, se pueden detectar rápidamente problemas, lo que ayuda a evitar ciclos de desarrollo y depuración prolongados. Además, al tener tests en su lugar, se pueden realizar refactorizaciones o cambios significativos en el código con más confianza, ya que los tests proporcionan una red de seguridad.\r\n\r\nFacilita la detección de regresiones: Las regresiones ocurren cuando se introducen nuevos errores en el software después de que se haya realizado un cambio. Los tests automatizados permiten detectar estas regresiones rápidamente, ya que pueden ser ejecutados de manera frecuente y exhaustiva. Esto ayuda a evitar que errores previamente corregidos vuelvan a aparecer en el software.\r\n\r\nEn resumen, los tests en programación proporcionan múltiples ventajas, incluyendo la detección temprana de errores, el mantenimiento del código, la documentación del comportamiento esperado, la mejora de la eficiencia y la detección de regresiones. Integrar pruebas en el proceso de desarrollo de software ayuda a construir productos de mayor calidad y confiabilidad.\r\n\r\n{.\".}--------------------------\r\n⭐ Do you like my songs? You can become a member and support me to create more content.\r\nJoin here: https://www.youtube.com/channel/UCyD5...\r\n⭐ Follow my Spotify Lo-Fi Playlist: https://spoti.fi/3c3MEiV\r\nmusic by @lofigeek\r\nhttps://www.instagram.com/lofigeek\r\nartwork by @shanevmm\r\nhttps://www.instagram.com/shanevmm\r\n{.\".}--------------------------',NULL,NULL,'2023-07-25 08:08:37'),
('4ebb2556-faa5-4c91-8544-1f5423f81f60','a904c0ba-7211-42f7-922a-560c846350cb',1,NULL,NULL,'https://www.youtube.com/embed/HSMCMfhTqLQ','2023-07-25 08:07:33'),
('618591cc-b4ea-437d-b02f-4faaa81c9ab1','26915999-32f3-44bb-91a5-37f1a196428c',2,'Una buena arquitectura de software es fundamental para el desarrollo de software por varias razones importantes:\r\n\r\nEscalabilidad: Una arquitectura bien diseñada permite que el software pueda crecer y adaptarse a medida que los requisitos y las demandas cambian con el tiempo. Proporciona una estructura sólida que facilita la adición de nuevas funcionalidades o la incorporación de más usuarios sin comprometer la estabilidad y el rendimiento del sistema.\r\n\r\nMantenibilidad: Una arquitectura bien pensada facilita el mantenimiento del software a lo largo del tiempo. Permite identificar y aislar rápidamente problemas o defectos, lo que hace más eficiente la corrección de errores y la implementación de cambios. Además, una arquitectura modular y bien documentada facilita la comprensión del sistema, lo que agiliza el proceso de mantenimiento.\r\n\r\nFlexibilidad: Una arquitectura bien definida permite la incorporación de nuevas tecnologías y la integración con otros sistemas de manera más sencilla. Proporciona una base flexible que permite adaptarse a los cambios en el entorno tecnológico y los requisitos del negocio, lo que a su vez facilita la evolución continua del software.\r\n\r\nRendimiento: Una arquitectura adecuada puede optimizar el rendimiento del software al garantizar un uso eficiente de los recursos disponibles, como el procesador, la memoria y la red. Al distribuir adecuadamente la carga de trabajo y minimizar la duplicación de código, se pueden lograr tiempos de respuesta más rápidos y un uso más eficiente de los recursos.\r\n\r\nCalidad del software: Una arquitectura sólida contribuye a la creación de software de alta calidad. Al establecer buenas prácticas y patrones de diseño, se puede mejorar la legibilidad, la estructura y la coherencia del código. Esto facilita la detección de errores, la realización de pruebas y la implementación de estándares de codificación consistentes, lo que a su vez conduce a un software más confiable y menos propenso a errores.\r\n\r\nEn resumen, una buena arquitectura de software es esencial para el desarrollo exitoso de aplicaciones. Ayuda a garantizar que el software sea escalable, mantenible, flexible, de alto rendimiento y de alta calidad, lo que a su vez conduce a un producto final exitoso y satisface las necesidades de los usuarios y las empresas a largo plazo.\r\n',NULL,NULL,'2023-07-25 08:06:46'),
('67634597-1509-4918-838e-2eed9a82f7a3','e514dbd1-31b6-4846-a886-df5480135878',2,'Los detalles de implementación se refieren a las acciones y decisiones específicas que se toman durante la etapa de desarrollo de un proyecto o sistema. Estos detalles se centran en la traducción de los requisitos y especificaciones en soluciones concretas y tangibles. Algunos ejemplos de detalles de implementación incluyen:\r\n\r\nElección de tecnología: Se selecciona el lenguaje de programación, el entorno de desarrollo, el framework y las herramientas adecuadas para construir el sistema.\r\n\r\nDiseño de la arquitectura: Se define la estructura general del sistema, incluyendo la distribución de componentes, la comunicación entre ellos y la organización de los datos.\r\n\r\nDiseño de la base de datos: Se decide cómo se almacenarán y estructurarán los datos, incluyendo la elección del tipo de base de datos y el diseño de las tablas y relaciones.\r\n\r\nImplementación de funciones y algoritmos: Se escriben y prueban las funciones y algoritmos necesarios para que el sistema cumpla con sus funcionalidades requeridas.\r\n\r\nInterfaz de usuario: Se diseña y desarrolla la interfaz gráfica o interacción con el usuario, teniendo en cuenta la usabilidad y la experiencia del usuario.\r\n\r\nPruebas y depuración: Se realizan pruebas exhaustivas para asegurar que el sistema funcione correctamente y se corrigen los errores y fallas identificados.\r\n\r\nOptimización de rendimiento: Se realizan ajustes y mejoras para optimizar el rendimiento del sistema, como la optimización de consultas de base de datos o el uso eficiente de recursos.\r\n\r\nSeguridad: Se implementan medidas de seguridad, como el cifrado de datos, la autenticación de usuarios y la protección contra ataques maliciosos.\r\n\r\nEn resumen, los detalles de implementación abordan los aspectos prácticos y técnicos de cómo se construye y se lleva a cabo un proyecto o sistema, teniendo en cuenta los requisitos y especificaciones establecidos.',NULL,NULL,'2023-07-25 08:11:13'),
('8675c959-b626-44f5-b21d-46d469ba6682','22567e92-aa8e-4af0-adfa-360518c5199f',2,'Los Value Objects (objetos de valor) son elementos clave en la programación orientada a objetos y se utilizan para representar conceptos inmutables y que carecen de identidad propia. También se les conoce como objetos inmutables o objetos de transferencia de datos.\r\n\r\nUn Value Object es una clase que encapsula un conjunto de atributos o propiedades relacionadas, pero a diferencia de una entidad, su identidad no se basa en un identificador único, sino en los valores de sus atributos. Esto significa que dos instancias de un Value Object son consideradas iguales si tienen los mismos valores en sus atributos.\r\n\r\nUn aspecto importante de los Value Objects es que son inmutables, lo que significa que una vez creados, sus valores no pueden modificarse. Si se desea realizar un cambio en un Value Object, se debe crear una nueva instancia con los valores actualizados.\r\n\r\nLos Value Objects son útiles en muchos casos, especialmente cuando se trabaja con conceptos que son inherentemente inmutables, como fechas, horas, coordenadas geográficas, direcciones, monedas, etc. Al utilizar Value Objects, se promueve la consistencia y la integridad de los datos, y se evita la necesidad de modificar el estado interno de los objetos, lo que simplifica el diseño y reduce los errores relacionados con el manejo de la mutabilidad.\r\n\r\nEn resumen, los Value Objects son objetos inmutables que representan conceptos de dominio y se basan en los valores de sus atributos en lugar de una identidad única. Son utilizados para promover la consistencia y la integridad de los datos en la programación orientada a objetos.',NULL,NULL,'2023-07-25 08:10:21'),
('ac288001-4a96-4cdd-9ea7-16e4d1ac8c97','e514dbd1-31b6-4846-a886-df5480135878',1,NULL,NULL,'https://www.youtube.com/embed/OyASF-tAGic','2023-07-25 08:11:07'),
('ad35c7f2-5801-47eb-81fd-11aa1058ec93','22567e92-aa8e-4af0-adfa-360518c5199f',1,NULL,NULL,'https://www.youtube.com/embed/_S0sAhNoA44','2023-07-25 08:10:16'),
('d51958f2-8d37-4bbc-954f-e6f464c3d51a','93d52a3a-bffe-41a6-a52d-455336219ba0',2,'El acoplamiento a nivel de arquitectura de software se refiere a la manera en que los componentes o módulos de un sistema interactúan entre sí. Especifica cómo se comunican, comparten información y dependen unos de otros.\r\n\r\nEn términos sencillos, puedes imaginar el acoplamiento como la forma en que los diferentes componentes de un sistema se conectan y trabajan juntos. Un acoplamiento estrecho significa que los componentes están fuertemente interconectados, mientras que un acoplamiento débil implica una menor dependencia entre ellos.\r\n\r\nEl acoplamiento estrecho implica que los cambios en un componente pueden tener un impacto significativo en otros componentes. Esto puede dificultar la modificación o el mantenimiento del sistema, ya que un cambio en un componente puede requerir modificaciones en varios otros. Además, un acoplamiento estrecho puede hacer que el sistema sea menos flexible y escalable.\r\n\r\nPor otro lado, un acoplamiento débil significa que los componentes son independientes entre sí y pueden funcionar de manera más autónoma. Esto facilita la modificación y el mantenimiento, ya que los cambios en un componente tienen menos probabilidades de afectar a otros. Además, un acoplamiento débil permite una mayor flexibilidad y escalabilidad, ya que los componentes pueden ser reemplazados o agregados fácilmente sin afectar al resto del sistema.\r\n\r\nEn resumen, el acoplamiento a nivel de arquitectura de software se refiere a cómo los componentes se relacionan entre sí en un sistema. Un acoplamiento estrecho implica una fuerte dependencia y puede dificultar los cambios y la escalabilidad, mientras que un acoplamiento débil implica una menor dependencia y proporciona mayor flexibilidad y mantenibilidad.',NULL,NULL,'2023-07-25 08:04:44');
/*!40000 ALTER TABLE `blogcontents` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `blogposts`
--

LOCK TABLES `blogposts` WRITE;
/*!40000 ALTER TABLE `blogposts` DISABLE KEYS */;
INSERT INTO `blogposts` VALUES
('22567e92-aa8e-4af0-adfa-360518c5199f','{.\".} - 6) Hablemos de, value objects.... mientras practicamos un poco de tdd con typescript','ca488d77-dd0c-4169-be14-c219bb2db090.jpg','https://www.youtube.com/embed/_S0sAhNoA44','arquitectura,tdd,typescript','2023-07-25 08:10:01'),
('26915999-32f3-44bb-91a5-37f1a196428c','{.\".} - 2) Hablemos de, arquitectura o diseño mientras practicamos un poco de tdd con typescript','1fe5e1e4-ed8c-48e5-84d6-f2cbad3016cd.jpg','https://www.youtube.com/embed/OyASF-tAGic','arquitectura,tdd,typescript','2023-07-25 08:05:55'),
('517d4167-56d8-4b6c-91e6-a1f7c48fb777','{.\".} - 4) Hablemos de testing.... mientras practicamos un poco de tdd con typescript :)','04995a08-1359-41e5-9536-0af070d00fcc.jpg','https://www.youtube.com/embed/OyASF-tAGic','arquitectura,tdd,typescript','2023-07-25 08:08:11'),
('93d52a3a-bffe-41a6-a52d-455336219ba0','{.\".} - 1) Hablemos de, acoplamiento mientras practicamos un poco de tdd con typescript','a7ae3479-e231-4481-80ff-a1d1f30ec1e6.jpg','https://www.youtube.com/embed/OyASF-tAGic','arquitectura,tdd,typescript','2023-07-25 08:04:26'),
('a904c0ba-7211-42f7-922a-560c846350cb','{.\".} - 3) Hablemos de, semantica.... mientras practicamos un poco de tdd con typescript','d3f7884a-6808-4075-a121-16da08a59149.jpg','https://www.youtube.com/embed/OyASF-tAGic','arquitectura,tdd,typescript','2023-07-25 08:07:16'),
('e514dbd1-31b6-4846-a886-df5480135878','{.\".} - 7) Hablemos de, retrasar DETALLES.... mientras practicamos un poco de tdd con typescript','d9ee4a0f-470d-4516-b14b-85df3b28b66e.jpg','https://www.youtube.com/embed/OyASF-tAGic','arquitectura,tdd,typescript','2023-07-25 08:10:48'),
('f34bce35-2ed9-44c3-9e1c-a0b23344c102','{.\".} - 5) Hablemos de, excepciones.... mientras practicamos un poco de tdd con typescript','72890d57-a04a-49f4-a8d2-21ea545839d7.jpg','https://www.youtube.com/embed/OyASF-tAGic','arquitectura,tdd,typescript','2023-07-25 08:09:08');
/*!40000 ALTER TABLE `blogposts` ENABLE KEYS */;
UNLOCK TABLES;